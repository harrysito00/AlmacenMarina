#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.17929
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlmacenMarina.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MarinaDB")]
	public partial class MarinaDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertBuy(Buy instance);
    partial void UpdateBuy(Buy instance);
    partial void DeleteBuy(Buy instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCodeProduct(CodeProduct instance);
    partial void UpdateCodeProduct(CodeProduct instance);
    partial void DeleteCodeProduct(CodeProduct instance);
    partial void InsertDetailBuy(DetailBuy instance);
    partial void UpdateDetailBuy(DetailBuy instance);
    partial void DeleteDetailBuy(DetailBuy instance);
    partial void InsertDetailSales(DetailSales instance);
    partial void UpdateDetailSales(DetailSales instance);
    partial void DeleteDetailSales(DetailSales instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertRoles(Roles instance);
    partial void UpdateRoles(Roles instance);
    partial void DeleteRoles(Roles instance);
    partial void InsertSales(Sales instance);
    partial void UpdateSales(Sales instance);
    partial void DeleteSales(Sales instance);
    partial void InsertUserRol(UserRol instance);
    partial void UpdateUserRol(UserRol instance);
    partial void DeleteUserRol(UserRol instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public MarinaDbDataContext() : 
				base(global::AlmacenMarina.Properties.Settings.Default.MarinaDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MarinaDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MarinaDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MarinaDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MarinaDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Buy> Buy
		{
			get
			{
				return this.GetTable<Buy>();
			}
		}
		
		public System.Data.Linq.Table<Category> Category
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<CodeProduct> CodeProduct
		{
			get
			{
				return this.GetTable<CodeProduct>();
			}
		}
		
		public System.Data.Linq.Table<DetailBuy> DetailBuy
		{
			get
			{
				return this.GetTable<DetailBuy>();
			}
		}
		
		public System.Data.Linq.Table<DetailSales> DetailSales
		{
			get
			{
				return this.GetTable<DetailSales>();
			}
		}
		
		public System.Data.Linq.Table<Person> Person
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<Roles> Roles
		{
			get
			{
				return this.GetTable<Roles>();
			}
		}
		
		public System.Data.Linq.Table<Sales> Sales
		{
			get
			{
				return this.GetTable<Sales>();
			}
		}
		
		public System.Data.Linq.Table<UserRol> UserRol
		{
			get
			{
				return this.GetTable<UserRol>();
			}
		}
		
		public System.Data.Linq.Table<Product> Product
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Buy")]
	public partial class Buy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdBuy;
		
		private System.Nullable<System.DateTime> _DateBuy;
		
		private System.Nullable<System.Guid> _IdUser;
		
		private EntitySet<DetailBuy> _DetailBuy;
		
		private EntityRef<User> _User;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdBuyChanging(int value);
    partial void OnIdBuyChanged();
    partial void OnDateBuyChanging(System.Nullable<System.DateTime> value);
    partial void OnDateBuyChanged();
    partial void OnIdUserChanging(System.Nullable<System.Guid> value);
    partial void OnIdUserChanged();
    #endregion
		
		public Buy()
		{
			this._DetailBuy = new EntitySet<DetailBuy>(new Action<DetailBuy>(this.attach_DetailBuy), new Action<DetailBuy>(this.detach_DetailBuy));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdBuy", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdBuy
		{
			get
			{
				return this._IdBuy;
			}
			set
			{
				if ((this._IdBuy != value))
				{
					this.OnIdBuyChanging(value);
					this.SendPropertyChanging();
					this._IdBuy = value;
					this.SendPropertyChanged("IdBuy");
					this.OnIdBuyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateBuy", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateBuy
		{
			get
			{
				return this._DateBuy;
			}
			set
			{
				if ((this._DateBuy != value))
				{
					this.OnDateBuyChanging(value);
					this.SendPropertyChanging();
					this._DateBuy = value;
					this.SendPropertyChanged("DateBuy");
					this.OnDateBuyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Buy_DetailBuy", Storage="_DetailBuy", ThisKey="IdBuy", OtherKey="IdBuy")]
		public EntitySet<DetailBuy> DetailBuy
		{
			get
			{
				return this._DetailBuy;
			}
			set
			{
				this._DetailBuy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Buy", Storage="_User", ThisKey="IdUser", OtherKey="IdUser", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Buy.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Buy.Add(this);
						this._IdUser = value.IdUser;
					}
					else
					{
						this._IdUser = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailBuy(DetailBuy entity)
		{
			this.SendPropertyChanging();
			entity.Buy = this;
		}
		
		private void detach_DetailBuy(DetailBuy entity)
		{
			this.SendPropertyChanging();
			entity.Buy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCategory;
		
		private string _nameCategory;
		
		private EntitySet<Product> _Product;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCategoryChanging(int value);
    partial void OnIdCategoryChanged();
    partial void OnnameCategoryChanging(string value);
    partial void OnnameCategoryChanged();
    #endregion
		
		public Category()
		{
			this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCategory", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCategory
		{
			get
			{
				return this._IdCategory;
			}
			set
			{
				if ((this._IdCategory != value))
				{
					this.OnIdCategoryChanging(value);
					this.SendPropertyChanging();
					this._IdCategory = value;
					this.SendPropertyChanged("IdCategory");
					this.OnIdCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameCategory", DbType="NVarChar(50)")]
		public string nameCategory
		{
			get
			{
				return this._nameCategory;
			}
			set
			{
				if ((this._nameCategory != value))
				{
					this.OnnameCategoryChanging(value);
					this.SendPropertyChanging();
					this._nameCategory = value;
					this.SendPropertyChanged("nameCategory");
					this.OnnameCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Product", ThisKey="IdCategory", OtherKey="IdCategory")]
		public EntitySet<Product> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				this._Product.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CodeProduct")]
	public partial class CodeProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IdCodeBox;
		
		private System.Nullable<long> _IdCodeProduct;
		
		private System.Nullable<int> _IdProduct;
		
		private System.Nullable<decimal> _Quality;
		
		private System.Nullable<System.DateTime> _DateMaturity;
		
		private System.Nullable<bool> _Enable;
		
		private EntityRef<Product> _Product;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCodeBoxChanging(long value);
    partial void OnIdCodeBoxChanged();
    partial void OnIdCodeProductChanging(System.Nullable<long> value);
    partial void OnIdCodeProductChanged();
    partial void OnIdProductChanging(System.Nullable<int> value);
    partial void OnIdProductChanged();
    partial void OnQualityChanging(System.Nullable<decimal> value);
    partial void OnQualityChanged();
    partial void OnDateMaturityChanging(System.Nullable<System.DateTime> value);
    partial void OnDateMaturityChanged();
    partial void OnEnableChanging(System.Nullable<bool> value);
    partial void OnEnableChanged();
    #endregion
		
		public CodeProduct()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCodeBox", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long IdCodeBox
		{
			get
			{
				return this._IdCodeBox;
			}
			set
			{
				if ((this._IdCodeBox != value))
				{
					this.OnIdCodeBoxChanging(value);
					this.SendPropertyChanging();
					this._IdCodeBox = value;
					this.SendPropertyChanged("IdCodeBox");
					this.OnIdCodeBoxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCodeProduct", DbType="BigInt")]
		public System.Nullable<long> IdCodeProduct
		{
			get
			{
				return this._IdCodeProduct;
			}
			set
			{
				if ((this._IdCodeProduct != value))
				{
					this.OnIdCodeProductChanging(value);
					this.SendPropertyChanging();
					this._IdCodeProduct = value;
					this.SendPropertyChanged("IdCodeProduct");
					this.OnIdCodeProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdProduct", DbType="Int")]
		public System.Nullable<int> IdProduct
		{
			get
			{
				return this._IdProduct;
			}
			set
			{
				if ((this._IdProduct != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProductChanging(value);
					this.SendPropertyChanging();
					this._IdProduct = value;
					this.SendPropertyChanged("IdProduct");
					this.OnIdProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quality", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> Quality
		{
			get
			{
				return this._Quality;
			}
			set
			{
				if ((this._Quality != value))
				{
					this.OnQualityChanging(value);
					this.SendPropertyChanging();
					this._Quality = value;
					this.SendPropertyChanged("Quality");
					this.OnQualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateMaturity", DbType="Date")]
		public System.Nullable<System.DateTime> DateMaturity
		{
			get
			{
				return this._DateMaturity;
			}
			set
			{
				if ((this._DateMaturity != value))
				{
					this.OnDateMaturityChanging(value);
					this.SendPropertyChanging();
					this._DateMaturity = value;
					this.SendPropertyChanged("DateMaturity");
					this.OnDateMaturityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enable", DbType="Bit")]
		public System.Nullable<bool> Enable
		{
			get
			{
				return this._Enable;
			}
			set
			{
				if ((this._Enable != value))
				{
					this.OnEnableChanging(value);
					this.SendPropertyChanging();
					this._Enable = value;
					this.SendPropertyChanged("Enable");
					this.OnEnableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_CodeProduct", Storage="_Product", ThisKey="IdProduct", OtherKey="IdProduct", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.CodeProduct.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.CodeProduct.Add(this);
						this._IdProduct = value.IdProduct;
					}
					else
					{
						this._IdProduct = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailBuy")]
	public partial class DetailBuy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdBuyDetail;
		
		private System.Nullable<int> _IdBuy;
		
		private System.Nullable<int> _IdProduct;
		
		private System.Nullable<decimal> _Quality;
		
		private System.Nullable<decimal> _PriceBuy;
		
		private EntityRef<Buy> _Buy;
		
		private EntityRef<Product> _Product;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdBuyDetailChanging(int value);
    partial void OnIdBuyDetailChanged();
    partial void OnIdBuyChanging(System.Nullable<int> value);
    partial void OnIdBuyChanged();
    partial void OnIdProductChanging(System.Nullable<int> value);
    partial void OnIdProductChanged();
    partial void OnQualityChanging(System.Nullable<decimal> value);
    partial void OnQualityChanged();
    partial void OnPriceBuyChanging(System.Nullable<decimal> value);
    partial void OnPriceBuyChanged();
    #endregion
		
		public DetailBuy()
		{
			this._Buy = default(EntityRef<Buy>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdBuyDetail", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdBuyDetail
		{
			get
			{
				return this._IdBuyDetail;
			}
			set
			{
				if ((this._IdBuyDetail != value))
				{
					this.OnIdBuyDetailChanging(value);
					this.SendPropertyChanging();
					this._IdBuyDetail = value;
					this.SendPropertyChanged("IdBuyDetail");
					this.OnIdBuyDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdBuy", DbType="Int")]
		public System.Nullable<int> IdBuy
		{
			get
			{
				return this._IdBuy;
			}
			set
			{
				if ((this._IdBuy != value))
				{
					if (this._Buy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdBuyChanging(value);
					this.SendPropertyChanging();
					this._IdBuy = value;
					this.SendPropertyChanged("IdBuy");
					this.OnIdBuyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdProduct", DbType="Int")]
		public System.Nullable<int> IdProduct
		{
			get
			{
				return this._IdProduct;
			}
			set
			{
				if ((this._IdProduct != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProductChanging(value);
					this.SendPropertyChanging();
					this._IdProduct = value;
					this.SendPropertyChanged("IdProduct");
					this.OnIdProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quality", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> Quality
		{
			get
			{
				return this._Quality;
			}
			set
			{
				if ((this._Quality != value))
				{
					this.OnQualityChanging(value);
					this.SendPropertyChanging();
					this._Quality = value;
					this.SendPropertyChanged("Quality");
					this.OnQualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceBuy", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> PriceBuy
		{
			get
			{
				return this._PriceBuy;
			}
			set
			{
				if ((this._PriceBuy != value))
				{
					this.OnPriceBuyChanging(value);
					this.SendPropertyChanging();
					this._PriceBuy = value;
					this.SendPropertyChanged("PriceBuy");
					this.OnPriceBuyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Buy_DetailBuy", Storage="_Buy", ThisKey="IdBuy", OtherKey="IdBuy", IsForeignKey=true)]
		public Buy Buy
		{
			get
			{
				return this._Buy.Entity;
			}
			set
			{
				Buy previousValue = this._Buy.Entity;
				if (((previousValue != value) 
							|| (this._Buy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Buy.Entity = null;
						previousValue.DetailBuy.Remove(this);
					}
					this._Buy.Entity = value;
					if ((value != null))
					{
						value.DetailBuy.Add(this);
						this._IdBuy = value.IdBuy;
					}
					else
					{
						this._IdBuy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Buy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_DetailBuy", Storage="_Product", ThisKey="IdProduct", OtherKey="IdProduct", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.DetailBuy.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.DetailBuy.Add(this);
						this._IdProduct = value.IdProduct;
					}
					else
					{
						this._IdProduct = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailSales")]
	public partial class DetailSales : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdDetailSales;
		
		private System.Nullable<int> _IdSales;
		
		private System.Nullable<int> _IdProduct;
		
		private System.Nullable<decimal> _Quality;
		
		private System.Nullable<decimal> _PriceSales;
		
		private EntityRef<Sales> _Sales;
		
		private EntityRef<Product> _Product;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdDetailSalesChanging(int value);
    partial void OnIdDetailSalesChanged();
    partial void OnIdSalesChanging(System.Nullable<int> value);
    partial void OnIdSalesChanged();
    partial void OnIdProductChanging(System.Nullable<int> value);
    partial void OnIdProductChanged();
    partial void OnQualityChanging(System.Nullable<decimal> value);
    partial void OnQualityChanged();
    partial void OnPriceSalesChanging(System.Nullable<decimal> value);
    partial void OnPriceSalesChanged();
    #endregion
		
		public DetailSales()
		{
			this._Sales = default(EntityRef<Sales>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDetailSales", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdDetailSales
		{
			get
			{
				return this._IdDetailSales;
			}
			set
			{
				if ((this._IdDetailSales != value))
				{
					this.OnIdDetailSalesChanging(value);
					this.SendPropertyChanging();
					this._IdDetailSales = value;
					this.SendPropertyChanged("IdDetailSales");
					this.OnIdDetailSalesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSales", DbType="Int")]
		public System.Nullable<int> IdSales
		{
			get
			{
				return this._IdSales;
			}
			set
			{
				if ((this._IdSales != value))
				{
					if (this._Sales.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSalesChanging(value);
					this.SendPropertyChanging();
					this._IdSales = value;
					this.SendPropertyChanged("IdSales");
					this.OnIdSalesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdProduct", DbType="Int")]
		public System.Nullable<int> IdProduct
		{
			get
			{
				return this._IdProduct;
			}
			set
			{
				if ((this._IdProduct != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProductChanging(value);
					this.SendPropertyChanging();
					this._IdProduct = value;
					this.SendPropertyChanged("IdProduct");
					this.OnIdProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quality", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> Quality
		{
			get
			{
				return this._Quality;
			}
			set
			{
				if ((this._Quality != value))
				{
					this.OnQualityChanging(value);
					this.SendPropertyChanging();
					this._Quality = value;
					this.SendPropertyChanged("Quality");
					this.OnQualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceSales", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> PriceSales
		{
			get
			{
				return this._PriceSales;
			}
			set
			{
				if ((this._PriceSales != value))
				{
					this.OnPriceSalesChanging(value);
					this.SendPropertyChanging();
					this._PriceSales = value;
					this.SendPropertyChanged("PriceSales");
					this.OnPriceSalesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sales_DetailSales", Storage="_Sales", ThisKey="IdSales", OtherKey="IdSales", IsForeignKey=true)]
		public Sales Sales
		{
			get
			{
				return this._Sales.Entity;
			}
			set
			{
				Sales previousValue = this._Sales.Entity;
				if (((previousValue != value) 
							|| (this._Sales.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sales.Entity = null;
						previousValue.DetailSales.Remove(this);
					}
					this._Sales.Entity = value;
					if ((value != null))
					{
						value.DetailSales.Add(this);
						this._IdSales = value.IdSales;
					}
					else
					{
						this._IdSales = default(Nullable<int>);
					}
					this.SendPropertyChanged("Sales");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_DetailSales", Storage="_Product", ThisKey="IdProduct", OtherKey="IdProduct", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.DetailSales.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.DetailSales.Add(this);
						this._IdProduct = value.IdProduct;
					}
					else
					{
						this._IdProduct = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdPerson;
		
		private string _Name;
		
		private string _LastName;
		
		private System.Nullable<int> _Telf;
		
		private System.Nullable<int> _Ci;
		
		private string _Addres;
		
		private System.Nullable<System.Guid> _IdUser;
		
		private EntityRef<User> _User;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdPersonChanging(int value);
    partial void OnIdPersonChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnTelfChanging(System.Nullable<int> value);
    partial void OnTelfChanged();
    partial void OnCiChanging(System.Nullable<int> value);
    partial void OnCiChanged();
    partial void OnAddresChanging(string value);
    partial void OnAddresChanged();
    partial void OnIdUserChanging(System.Nullable<System.Guid> value);
    partial void OnIdUserChanged();
    #endregion
		
		public Person()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPerson", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdPerson
		{
			get
			{
				return this._IdPerson;
			}
			set
			{
				if ((this._IdPerson != value))
				{
					this.OnIdPersonChanging(value);
					this.SendPropertyChanging();
					this._IdPerson = value;
					this.SendPropertyChanged("IdPerson");
					this.OnIdPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telf", DbType="Int")]
		public System.Nullable<int> Telf
		{
			get
			{
				return this._Telf;
			}
			set
			{
				if ((this._Telf != value))
				{
					this.OnTelfChanging(value);
					this.SendPropertyChanging();
					this._Telf = value;
					this.SendPropertyChanged("Telf");
					this.OnTelfChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ci", DbType="Int")]
		public System.Nullable<int> Ci
		{
			get
			{
				return this._Ci;
			}
			set
			{
				if ((this._Ci != value))
				{
					this.OnCiChanging(value);
					this.SendPropertyChanging();
					this._Ci = value;
					this.SendPropertyChanged("Ci");
					this.OnCiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Addres", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Addres
		{
			get
			{
				return this._Addres;
			}
			set
			{
				if ((this._Addres != value))
				{
					this.OnAddresChanging(value);
					this.SendPropertyChanging();
					this._Addres = value;
					this.SendPropertyChanged("Addres");
					this.OnAddresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Person", Storage="_User", ThisKey="IdUser", OtherKey="IdUser", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Person.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Person.Add(this);
						this._IdUser = value.IdUser;
					}
					else
					{
						this._IdUser = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Roles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRol;
		
		private string _NameRol;
		
		private EntitySet<UserRol> _UserRol;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRolChanging(int value);
    partial void OnIdRolChanged();
    partial void OnNameRolChanging(string value);
    partial void OnNameRolChanged();
    #endregion
		
		public Roles()
		{
			this._UserRol = new EntitySet<UserRol>(new Action<UserRol>(this.attach_UserRol), new Action<UserRol>(this.detach_UserRol));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRol", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRol
		{
			get
			{
				return this._IdRol;
			}
			set
			{
				if ((this._IdRol != value))
				{
					this.OnIdRolChanging(value);
					this.SendPropertyChanging();
					this._IdRol = value;
					this.SendPropertyChanged("IdRol");
					this.OnIdRolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameRol", DbType="NVarChar(50)")]
		public string NameRol
		{
			get
			{
				return this._NameRol;
			}
			set
			{
				if ((this._NameRol != value))
				{
					this.OnNameRolChanging(value);
					this.SendPropertyChanging();
					this._NameRol = value;
					this.SendPropertyChanged("NameRol");
					this.OnNameRolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roles_UserRol", Storage="_UserRol", ThisKey="IdRol", OtherKey="IdRol")]
		public EntitySet<UserRol> UserRol
		{
			get
			{
				return this._UserRol;
			}
			set
			{
				this._UserRol.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRol(UserRol entity)
		{
			this.SendPropertyChanging();
			entity.Roles = this;
		}
		
		private void detach_UserRol(UserRol entity)
		{
			this.SendPropertyChanging();
			entity.Roles = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sales")]
	public partial class Sales : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdSales;
		
		private System.Nullable<System.DateTime> _DateSales;
		
		private System.Nullable<System.Guid> _IdUser;
		
		private EntitySet<DetailSales> _DetailSales;
		
		private EntityRef<User> _User;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdSalesChanging(int value);
    partial void OnIdSalesChanged();
    partial void OnDateSalesChanging(System.Nullable<System.DateTime> value);
    partial void OnDateSalesChanged();
    partial void OnIdUserChanging(System.Nullable<System.Guid> value);
    partial void OnIdUserChanged();
    #endregion
		
		public Sales()
		{
			this._DetailSales = new EntitySet<DetailSales>(new Action<DetailSales>(this.attach_DetailSales), new Action<DetailSales>(this.detach_DetailSales));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSales", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdSales
		{
			get
			{
				return this._IdSales;
			}
			set
			{
				if ((this._IdSales != value))
				{
					this.OnIdSalesChanging(value);
					this.SendPropertyChanging();
					this._IdSales = value;
					this.SendPropertyChanged("IdSales");
					this.OnIdSalesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateSales", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSales
		{
			get
			{
				return this._DateSales;
			}
			set
			{
				if ((this._DateSales != value))
				{
					this.OnDateSalesChanging(value);
					this.SendPropertyChanging();
					this._DateSales = value;
					this.SendPropertyChanged("DateSales");
					this.OnDateSalesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sales_DetailSales", Storage="_DetailSales", ThisKey="IdSales", OtherKey="IdSales")]
		public EntitySet<DetailSales> DetailSales
		{
			get
			{
				return this._DetailSales;
			}
			set
			{
				this._DetailSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Sales", Storage="_User", ThisKey="IdUser", OtherKey="IdUser", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._IdUser = value.IdUser;
					}
					else
					{
						this._IdUser = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailSales(DetailSales entity)
		{
			this.SendPropertyChanging();
			entity.Sales = this;
		}
		
		private void detach_DetailSales(DetailSales entity)
		{
			this.SendPropertyChanging();
			entity.Sales = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRol")]
	public partial class UserRol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdUser;
		
		private int _IdRol;
		
		private EntityRef<Roles> _Roles;
		
		private EntityRef<User> _User;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdUserChanging(System.Guid value);
    partial void OnIdUserChanged();
    partial void OnIdRolChanging(int value);
    partial void OnIdRolChanged();
    #endregion
		
		public UserRol()
		{
			this._Roles = default(EntityRef<Roles>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRol", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdRol
		{
			get
			{
				return this._IdRol;
			}
			set
			{
				if ((this._IdRol != value))
				{
					if (this._Roles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRolChanging(value);
					this.SendPropertyChanging();
					this._IdRol = value;
					this.SendPropertyChanged("IdRol");
					this.OnIdRolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roles_UserRol", Storage="_Roles", ThisKey="IdRol", OtherKey="IdRol", IsForeignKey=true)]
		public Roles Roles
		{
			get
			{
				return this._Roles.Entity;
			}
			set
			{
				Roles previousValue = this._Roles.Entity;
				if (((previousValue != value) 
							|| (this._Roles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Roles.Entity = null;
						previousValue.UserRol.Remove(this);
					}
					this._Roles.Entity = value;
					if ((value != null))
					{
						value.UserRol.Add(this);
						this._IdRol = value.IdRol;
					}
					else
					{
						this._IdRol = default(int);
					}
					this.SendPropertyChanged("Roles");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRol", Storage="_User", ThisKey="IdUser", OtherKey="IdUser", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRol.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRol.Add(this);
						this._IdUser = value.IdUser;
					}
					else
					{
						this._IdUser = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdProduct;
		
		private string _nameProduct;
		
		private System.Nullable<decimal> _price;
		
		private System.Nullable<int> _IdCategory;
		
		private EntitySet<CodeProduct> _CodeProduct;
		
		private EntitySet<DetailBuy> _DetailBuy;
		
		private EntitySet<DetailSales> _DetailSales;
		
		private EntityRef<Category> _Category;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdProductChanging(int value);
    partial void OnIdProductChanged();
    partial void OnnameProductChanging(string value);
    partial void OnnameProductChanged();
    partial void OnpriceChanging(System.Nullable<decimal> value);
    partial void OnpriceChanged();
    partial void OnIdCategoryChanging(System.Nullable<int> value);
    partial void OnIdCategoryChanged();
    #endregion
		
		public Product()
		{
			this._CodeProduct = new EntitySet<CodeProduct>(new Action<CodeProduct>(this.attach_CodeProduct), new Action<CodeProduct>(this.detach_CodeProduct));
			this._DetailBuy = new EntitySet<DetailBuy>(new Action<DetailBuy>(this.attach_DetailBuy), new Action<DetailBuy>(this.detach_DetailBuy));
			this._DetailSales = new EntitySet<DetailSales>(new Action<DetailSales>(this.attach_DetailSales), new Action<DetailSales>(this.detach_DetailSales));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdProduct", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdProduct
		{
			get
			{
				return this._IdProduct;
			}
			set
			{
				if ((this._IdProduct != value))
				{
					this.OnIdProductChanging(value);
					this.SendPropertyChanging();
					this._IdProduct = value;
					this.SendPropertyChanged("IdProduct");
					this.OnIdProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameProduct", DbType="NVarChar(50)")]
		public string nameProduct
		{
			get
			{
				return this._nameProduct;
			}
			set
			{
				if ((this._nameProduct != value))
				{
					this.OnnameProductChanging(value);
					this.SendPropertyChanging();
					this._nameProduct = value;
					this.SendPropertyChanged("nameProduct");
					this.OnnameProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCategory", DbType="Int")]
		public System.Nullable<int> IdCategory
		{
			get
			{
				return this._IdCategory;
			}
			set
			{
				if ((this._IdCategory != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCategoryChanging(value);
					this.SendPropertyChanging();
					this._IdCategory = value;
					this.SendPropertyChanged("IdCategory");
					this.OnIdCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_CodeProduct", Storage="_CodeProduct", ThisKey="IdProduct", OtherKey="IdProduct")]
		public EntitySet<CodeProduct> CodeProduct
		{
			get
			{
				return this._CodeProduct;
			}
			set
			{
				this._CodeProduct.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_DetailBuy", Storage="_DetailBuy", ThisKey="IdProduct", OtherKey="IdProduct")]
		public EntitySet<DetailBuy> DetailBuy
		{
			get
			{
				return this._DetailBuy;
			}
			set
			{
				this._DetailBuy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_DetailSales", Storage="_DetailSales", ThisKey="IdProduct", OtherKey="IdProduct")]
		public EntitySet<DetailSales> DetailSales
		{
			get
			{
				return this._DetailSales;
			}
			set
			{
				this._DetailSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Category", ThisKey="IdCategory", OtherKey="IdCategory", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Product.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Product.Add(this);
						this._IdCategory = value.IdCategory;
					}
					else
					{
						this._IdCategory = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CodeProduct(CodeProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_CodeProduct(CodeProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_DetailBuy(DetailBuy entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_DetailBuy(DetailBuy entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_DetailSales(DetailSales entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_DetailSales(DetailSales entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdUser;
		
		private string _UserName;
		
		private string _Paswrod;
		
		private System.Nullable<bool> _Enable;
		
		private EntitySet<Buy> _Buy;
		
		private EntitySet<Person> _Person;
		
		private EntitySet<Sales> _Sales;
		
		private EntitySet<UserRol> _UserRol;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdUserChanging(System.Guid value);
    partial void OnIdUserChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPaswrodChanging(string value);
    partial void OnPaswrodChanged();
    partial void OnEnableChanging(System.Nullable<bool> value);
    partial void OnEnableChanged();
    #endregion
		
		public User()
		{
			this._Buy = new EntitySet<Buy>(new Action<Buy>(this.attach_Buy), new Action<Buy>(this.detach_Buy));
			this._Person = new EntitySet<Person>(new Action<Person>(this.attach_Person), new Action<Person>(this.detach_Person));
			this._Sales = new EntitySet<Sales>(new Action<Sales>(this.attach_Sales), new Action<Sales>(this.detach_Sales));
			this._UserRol = new EntitySet<UserRol>(new Action<UserRol>(this.attach_UserRol), new Action<UserRol>(this.detach_UserRol));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paswrod", DbType="NVarChar(MAX)")]
		public string Paswrod
		{
			get
			{
				return this._Paswrod;
			}
			set
			{
				if ((this._Paswrod != value))
				{
					this.OnPaswrodChanging(value);
					this.SendPropertyChanging();
					this._Paswrod = value;
					this.SendPropertyChanged("Paswrod");
					this.OnPaswrodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enable", DbType="Bit")]
		public System.Nullable<bool> Enable
		{
			get
			{
				return this._Enable;
			}
			set
			{
				if ((this._Enable != value))
				{
					this.OnEnableChanging(value);
					this.SendPropertyChanging();
					this._Enable = value;
					this.SendPropertyChanged("Enable");
					this.OnEnableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Buy", Storage="_Buy", ThisKey="IdUser", OtherKey="IdUser")]
		public EntitySet<Buy> Buy
		{
			get
			{
				return this._Buy;
			}
			set
			{
				this._Buy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Person", Storage="_Person", ThisKey="IdUser", OtherKey="IdUser")]
		public EntitySet<Person> Person
		{
			get
			{
				return this._Person;
			}
			set
			{
				this._Person.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Sales", Storage="_Sales", ThisKey="IdUser", OtherKey="IdUser")]
		public EntitySet<Sales> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRol", Storage="_UserRol", ThisKey="IdUser", OtherKey="IdUser")]
		public EntitySet<UserRol> UserRol
		{
			get
			{
				return this._UserRol;
			}
			set
			{
				this._UserRol.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Buy(Buy entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Buy(Buy entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Person(Person entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Person(Person entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Sales(Sales entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Sales(Sales entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserRol(UserRol entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRol(UserRol entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
